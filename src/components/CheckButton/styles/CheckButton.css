

.page__toggle{
    /* margin-top: 1.25rem;
    margin-right: 1.5rem; */
    /* border: 1px solid magenta; */
    font-size: var(--pageToggleTextFontSize);
  }
  
  
  .toggle{
    --uiToggleSize: var(--toggleSize, 1.125rem);
    --uiToggleBorderWidth: var(--toggleBorderWidth, 2px);
    --uiToggleColor: var(--toggleColor, #737373);
    
    display: var(--toggleDisplay, inline-flex);
    position: relative;
  }
  
  .toggle__input{
    /*
    The pattern by Sara Soueidan https://www.sarasoueidan.com/blog/inclusively-hiding-and-styling-checkboxes-and-radio-buttons/
    */
    
    width: var(--uiToggleSize);
    height: var(--uiToggleSize);
    opacity: 0;
    
    position: absolute;
    top: 0;
    left: 0;
    margin: 0;

    
  }
  
  /*
  1. Calculation of the gap for the custom checkbox
  */
  
  .toggle__label{
    
    display: inline-flex;
    min-height: var(--uiToggleSize);
    padding-left: calc(var(--uiToggleSize) + var(--toggleIndent, .4em));

    
  }
  
  .toggle__input:not(:disabled) ~ .toggle__label{
    cursor: pointer;

  }
  
  /*
  1. Ems helps to calculate size of the checkbox
  */
  
  .toggle__label::after{
    content: "";
    box-sizing: border-box;  
    width: 1em;
    height: 1em;
    font-size: var(--uiToggleSize); /* 1 */
    
    background-color: transparent;
    border: var(--uiToggleBorderWidth) solid var(--uiToggleColor);
  
    position: absolute;
    left: 0;
    top: 0;
    z-index: 2;

    /* border: 1px solid magenta; */
    border-radius: .1em;
  }
  
  .toggle__input:checked ~ .toggle__label::after{
    background-color: var(--uiToggleColor);
    /* border: 1px solid magenta; */
    border-radius: .1em;
  }
  
  .toggle__text{
    margin-top: .15em;
    margin-bottom: .18em;
    font-size: .875rem;
    color: #737373;
  }
  
  /*
  The arrow size and position depends from sizes of square because I needed an arrow correct positioning from the top left corner of the element toggle
  
  1. Ems helps to calculate size and position of the arrow
  */
  
  .toggle__label::before{
    content: "";
    width: 0;
    height: 0;
    font-size: var(--uiToggleSize); /* 1 */
  
    border-left-width: 0;
    border-bottom-width: 0;
    border-left-style: solid;
    border-bottom-style: solid;
    border-color: var(--toggleArrowColor, #000);
  
    position: absolute;
    top: .5428em;
    left: .2em;
    z-index: 3;
    
    /* border: 1px solid blue; */
    transform-origin: left top;
    transform: rotate(-40deg) skew(10deg);
    transition: .15s all linear;
  }
  
  .toggle__input:checked ~ .toggle__label::before{
    --uiToggleArrowWidth: var(--toggleArrowWidth, 2px);
    margin: auto;
    /* border: 1px solid magenta; */
    width: .45em;
    height: .2em;
    border-left-width: var(--uiToggleArrowWidth);
    border-bottom-width: var(--uiToggleArrowWidth);
  }
  
  /*
  States
  */
  
  /* disabled state */
  
  .toggle__input:disabled ~ .toggle__label{
    opacity: var(--toggleOpacityDisabled, .24);
    cursor: var(--toggleCursorDisabled, not-allowed);
    user-select: none;
  }
  
  
